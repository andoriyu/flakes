---
name: Validate Flake & Packages
on:
  pull_request:
    # Sequence of patterns matched against refs/heads
    branches: [main]
  workflow_dispatch:  # allows manual triggering
  schedule:
    - cron: 0 0 * * 0  # runs weekly on Sunday at 00:00

permissions:
  id-token: write
  contents: read

jobs:
  validate-flake:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
      - uses: DeterminateSystems/determinate-nix-action@main
      - uses: DeterminateSystems/flakehub-cache-action@main
      - run: nix flake show
      - run: nix flake check
  
  get-packages:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.get-packages.outputs.packages }}
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
      - uses: DeterminateSystems/determinate-nix-action@main
      - uses: DeterminateSystems/flakehub-cache-action@main
      - id: get-packages
        name: Determine packages to build
        run: |
          set -euo pipefail

          if [ "${{ github.event_name }}" = "pull_request" ]; then
            git fetch origin ${{ github.event.pull_request.base.ref }}
            BASE=$(git merge-base HEAD origin/${{ github.event.pull_request.base.ref }} || true)
            if [ -n "$BASE" ]; then
              CHANGED_FILES=$(git diff --name-only "$BASE"..HEAD)
            else
              echo "Warning: no merge base found, assuming all files changed"
              CHANGED_FILES=$(git diff --name-only HEAD)
            fi

            if echo "$CHANGED_FILES" | grep -q '^packages.nix'; then
              # packages.nix changed, build all packages
              PACKAGES=$(nix flake show --json | jq -r '.packages."x86_64-linux" | keys | tostring')
            else
              PACKAGES=$(echo "$CHANGED_FILES" | grep '^packages/' | cut -d/ -f2 | sort -u | jq -R -s -c 'split("\n")[:-1]')
              if [ -z "$PACKAGES" ] || [ "$PACKAGES" = "[]" ]; then
                PACKAGES="[]"
              fi
            fi
          else
            # Scheduled or manual run: build all packages
            PACKAGES=$(nix flake show --json | jq -r '.packages."x86_64-linux" | keys | tostring')
          fi

          echo "packages=$PACKAGES" >> "$GITHUB_OUTPUT"
          echo "Packages to build: $PACKAGES"
  
  build:
    needs: get-packages
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pkg: ${{ fromJson(needs.get-packages.outputs.packages) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
      - uses: DeterminateSystems/determinate-nix-action@main
      - uses: DeterminateSystems/flakehub-cache-action@main
      - run: nix build .#${{matrix.pkg}}
