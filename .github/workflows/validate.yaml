---
name: Validate Flake & Packages
on:
  pull_request:
    # Sequence of patterns matched against refs/heads
    branches: [main]
  workflow_dispatch:  # allows manual triggering
  schedule:
    - cron: 0 0 * * 0  # runs weekly on Sunday at 00:00

permissions:
  id-token: write
  contents: read

jobs:
  validate-flake:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: DeterminateSystems/determinate-nix-action@main
      - uses: DeterminateSystems/flakehub-cache-action@main
      - run: nix flake show
      - run: nix build .#checks.x86_64-linux.neo4j-apoc
  
  get-packages:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.get-packages.outputs.packages }}
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: DeterminateSystems/determinate-nix-action@main
      - uses: DeterminateSystems/flakehub-cache-action@main
      - id: get-packages
        name: Get all packages from flake
        run: |
          # Get all packages from the flake and format as JSON array
          PACKAGES=$(nix flake show --json | jq -r '.packages."x86_64-linux" | keys | tostring')
          echo "packages=$PACKAGES" >> $GITHUB_OUTPUT
          echo "Found packages: $PACKAGES"
  
  build:
    needs: get-packages
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pkg: ${{ fromJson(needs.get-packages.outputs.packages) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: DeterminateSystems/determinate-nix-action@main
      - uses: DeterminateSystems/flakehub-cache-action@main
      - run: nix build .#${{matrix.pkg}}

  get-tests:
    runs-on: ubuntu-latest
    outputs:
      tests: ${{ steps.get-tests.outputs.tests }}
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: DeterminateSystems/determinate-nix-action@main
      - uses: DeterminateSystems/flakehub-cache-action@main
      - id: get-tests
        run: |
          TESTS=$(nix flake show --json \
            | jq -r '.checks."x86_64-linux" | keys | map(select(. != "pre-commit-check")) | tostring')
          echo "tests=$TESTS" >> $GITHUB_OUTPUT
          echo "Found tests: $TESTS"

  build-tests:
    needs: get-tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test: ${{ fromJson(needs.get-tests.outputs.tests) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: DeterminateSystems/determinate-nix-action@main
      - uses: DeterminateSystems/flakehub-cache-action@main
      - run: nix build .#checks.x86_64-linux.${{ matrix.test }}
